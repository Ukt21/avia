
from __future__ import annotations
import os, asyncio, aiohttp
from datetime import datetime
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .aviasales import fetch_cheapest
from .payments import create_service_fee_invoice

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
CURRENCY = os.getenv("CURRENCY", "UZS")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

UZ_ORIGINS = [
    {"city":"–¢–∞—à–∫–µ–Ω—Ç", "code":"TAS"},
    {"city":"–°–∞–º–∞—Ä–∫–∞–Ω–¥", "code":"SKD"},
    {"city":"–ê–Ω–¥–∏–∂–∞–Ω", "code":"AZN"},
]
RU_DESTS = [
    {"city":"–ú–æ—Å–∫–≤–∞ (–≤—Å–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã)", "codes":["SVO","DME","VKO"]},
    {"city":"–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (LED)", "codes":["LED"]},
]
UAE_DESTS = [
    {"city":"–î—É–±–∞–π (DXB/DWC)", "codes":["DXB","DWC"]},
    {"city":"–®–∞—Ä–¥–∂–∞ (SHJ)", "codes":["SHJ"]},
]
TR_DESTS = [
    {"city":"–°—Ç–∞–º–±—É–ª (IST/SAW)", "codes":["IST","SAW"]},
    {"city":"–ê–Ω–∫–∞—Ä–∞ (ESB)", "codes":["ESB"]},
]

USER_STATE: Dict[int, Dict[str,Any]] = {}

def route_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    kb.button(text="üá∑üá∫ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω ‚Üí –†–æ—Å—Å–∏—è", callback_data="dir:ru")
    kb.button(text="üá¶üá™ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω ‚Üí –î—É–±–∞–π/–û–ê–≠", callback_data="dir:uae")
    kb.button(text="üáπüá∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω ‚Üí –¢—É—Ä—Ü–∏—è", callback_data="dir:tr")
    kb.adjust(1,1,1)
    return kb

def city_keyboard(origins, dest_groups, tag):
    kb = InlineKeyboardBuilder()
    for o in origins:
        kb.button(text=f"üõ´ {o['city']}", callback_data=f"orig:{tag}:{o['code']}")
    kb.adjust(2)
    kb.row()
    for g in dest_groups:
        kb.button(text=f"üõ¨ {g['city']}", callback_data=f"destgrp:{tag}:{g['city']}")
    kb.adjust(2)
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:menu")
    return kb

def date_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data="date:today")
    kb.button(text="–ó–∞–≤—Ç—Ä–∞", callback_data="date:tomorrow")
    kb.button(text="üóì –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="date:manual")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back:routes")
    kb.adjust(2,2)
    return kb

def format_card(x: Dict[str,Any]) -> str:
    dt = datetime.fromisoformat(x["departure_at"].replace("Z",""))
    tr = "–±–µ–∑ –ø–µ—Ä–µ—Å–∞–¥–æ–∫" if (x.get("transfers") or 0) == 0 else f"{x.get('transfers')} –ø–µ—Ä–µ—Å."
    return (
        f"üí∏ <b>{x['price']} {CURRENCY}</b> ‚Ä¢ {tr}\n"
        f"üõ´ {x['origin']} ‚Üí {x['destination']} ‚Ä¢ {dt.strftime('%d.%m %H:%M')}\n"
        f"‚úàÔ∏è {x.get('airline','')} {x.get('flight_number','')}\n"
        f"üîó <a href='{x['link']}'>–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ</a>"
    )

@dp.message(Command("start"))
async def start_cmd(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ArzonUching ‚Äî –Ω–∞–π–¥—É —Å–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –ø–æ —Ç–≤–æ–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º.\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂—É –¢–û–ü‚Äë3 –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ‚Äî –∑–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä 50 000 —Å—É–º.",
        reply_markup=route_keyboard().as_markup()
    )

@dp.callback_query(F.data.startswith("dir:"))
async def pick_dir(c: CallbackQuery):
    tag = c.data.split(":")[1]
    await c.answer()
    if tag == "ru":
        kb = city_keyboard(UZ_ORIGINS, RU_DESTS, tag)
        txt = "–í—ã–±–µ—Ä–∏ –≤—ã–ª–µ—Ç –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –∏ –≥—Ä—É–ø–ø—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –†–æ—Å—Å–∏—é:"
    elif tag == "uae":
        kb = city_keyboard(UZ_ORIGINS, UAE_DESTS, tag)
        txt = "–í—ã–±–µ—Ä–∏ –≤—ã–ª–µ—Ç –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –û–ê–≠:"
    else:
        kb = city_keyboard(UZ_ORIGINS, TR_DESTS, tag)
        txt = "–í—ã–±–µ—Ä–∏ –≤—ã–ª–µ—Ç –∏–∑ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –¢—É—Ä—Ü–∏—é:"
    await c.message.edit_text(txt, reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("orig:"))
async def set_origin(c: CallbackQuery):
    _, tag, iata = c.data.split(":")
    st = USER_STATE.setdefault(c.from_user.id, {})
    st["tag"] = tag; st["origin"] = iata
    await c.answer("–ì–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    # –ü–æ–ø—Ä–æ—Å–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ (–∫–Ω–æ–ø–∫–∏ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ)

@dp.callback_query(F.data.startswith("destgrp:"))
async def set_dest_group(c: CallbackQuery):
    _, tag, name = c.data.split(":")
    st = USER_STATE.setdefault(c.from_user.id, {})
    st["tag"] = tag; st["dest_group"] = name
    await c.message.edit_text(
        "–û–∫, –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î):",
        reply_markup=date_keyboard().as_markup()
    )

@dp.callback_query(F.data.startswith("date:"))
async def set_date(c: CallbackQuery):
    _, val = c.data.split(":")
    if val == "manual":
        await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º: –Ω–∞–ø—Ä–∏–º–µ—Ä 2025-11-15")
    else:
        if val == "today":
            dep = datetime.now().strftime("%Y-%m-%d")
        else:
            dep = (datetime.now()+__import__('datetime').timedelta(days=1)).strftime("%Y-%m-%d")
        await run_search(c, dep)

@dp.message(F.text.regexp(r"^\d{4}-\d{2}-\d{2}$"))
async def manual_date(m: Message):
    await run_search(m, m.text.strip())

async def run_search(ctx, dep_str: str):
    uid = ctx.from_user.id
    st = USER_STATE.get(uid, {})
    origin = st.get("origin"); tag = st.get("tag"); dest_group_name = st.get("dest_group")
    if not all([origin, tag, dest_group_name]):
        reply = ctx.message.reply if hasattr(ctx, 'message') else ctx.reply
        await reply("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞. –ó–∞–ø—É—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ: /start"); return

    dest_groups = RU_DESTS if tag=="ru" else UAE_DESTS if tag=="uae" else TR_DESTS
    grp = next((g for g in dest_groups if g["city"]==dest_group_name), None)
    if not grp:
        reply = ctx.message.reply if hasattr(ctx, 'message') else ctx.reply
        await reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. /start"); return

    dep_date = datetime.strptime(dep_str, "%Y-%m-%d")
    reply = ctx.message.reply if hasattr(ctx, 'message') else ctx.reply
    await reply("–ò—â—É —Å–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ‚Ä¶")

    all_offers: List[Dict[str,Any]] = []
    async with aiohttp.ClientSession() as session:
        for dest in grp["codes"]:
            offs = await fetch_cheapest(session, origin, dest, dep_date, days_flex=3, currency=CURRENCY)
            for o in offs:
                o["destination"] = dest
            all_offers.extend(offs)

    if not all_offers:
        await reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥—É—é –¥–∞—Ç—É/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."); return

    all_offers.sort(key=lambda z: z["price"] or 9e12)
    free = all_offers[:3]
    paid = all_offers[3:10]

    free_text = "\n\n".join([f"{i+1}) "+format_card(x) for i,x in enumerate(free)])
    msg = "üéØ <b>–°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ):</b>\n\n" + free_text

    if paid:
        inv = create_service_fee_invoice(uid)
        pay_link = inv.get("pay_link", "https://example.com/pay")  # fallback
        msg += ("\n\n‚Äî ‚Äî ‚Äî\n"
                "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –µ—â—ë 7+ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ü–µ–Ω –∏ —Ñ–∏–ª—å—Ç—Ä—ã, –æ–ø–ª–∞—Ç–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä 50 000 —Å—É–º.\n"
                f"<a href='{pay_link}'>–û–ø–ª–∞—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä</a>")
    await reply(msg, disable_web_page_preview=True)
    # === –ö–Ω–æ–ø–∫–∞ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
import os
from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

AFFILIATE_URL = os.getenv("AFFILIATE_URL", "")

@dp.message(F.text)
async def send_affiliate_on_any_text(message: Message):
    """
    –ë—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–∞—ë–º –∫–Ω–æ–ø–∫—É —Å –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π.
    –¢–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç ¬´–µ—Å—Ç—å –±–∏–ª–µ—Ç—ã¬ª –Ω–∞ —Å–∞–π—Ç–µ-–ø–∞—Ä—Ç–Ω—ë—Ä–µ, –∞ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –∫–æ–º–∏—Å—Å–∏—é.
    """
    if not AFFILIATE_URL:
        await message.answer("–°—Å—ã–ª–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –±–∏–ª–µ—Ç—ã ‚úàÔ∏è", url=AFFILIATE_URL)]
        ]
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:", reply_markup=kb)

