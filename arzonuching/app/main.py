# arzonuching/app/main.py
from __future__ import annotations

import asyncio
import os
from datetime import datetime
from typing import List, Dict, Tuple

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# =========================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ ENV
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
TP_API_TOKEN = os.getenv("TP_API_TOKEN", "").strip()   # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å —á–µ—Ä–µ–∑ API
TP_MARKER = os.getenv("TP_MARKER", "").strip()         # –¥–ª—è deeplink —Å—Å—ã–ª–æ–∫

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# =========================
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


# =========================
# –ü–æ–º–æ—â–Ω–∏–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# =========================
def build_ticket_card(result: Dict) -> Tuple[str, InlineKeyboardMarkup]:
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–π—Å–∞ –≤ —Ç–µ–∫—Å—Ç + inline-–∫–Ω–æ–ø–∫—É.
    –°—Å—ã–ª–∫–∞ —Å–∫—Ä—ã—Ç–∞ –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π.
    """
    airline = result.get("airline", "–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è")
    origin = result.get("origin", "")
    destination = result.get("destination", "")
    depart_date = result.get("depart_date", "")
    return_date = result.get("return_date", "")
    price = result.get("price", "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    ticket_url = result.get("url") or "https://aviasales.com"

    text = (
        f"‚úàÔ∏è <b>{origin}</b> ‚Üí <b>{destination}</b>\n"
        f"üõ´ –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {airline}\n"
        f"üìÖ –î–∞—Ç—ã: {depart_date} ‚Äî {return_date}\n"
        f"üí∞ –¶–µ–Ω–∞: <b>–æ—Ç {price} —Å—É–º</b>"
    )

    button = InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–ª–µ—Ç—ã üîé", url=ticket_url)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button]])
    return text, keyboard


def build_deeplink_url(origin: str, destination: str, depart_date: str, return_date: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è deeplink-—Å—Å—ã–ª–∫–∞ Travelpayouts/Aviasales –±–µ–∑ –≤–∏–¥–∏–º–æ–π URL –≤ —Ç–µ–∫—Å—Ç–µ.
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ API-–∑–∞–ø—Ä–æ—Å–∞ –∫ —Ü–µ–Ω–∞–º.
    """
    marker = TP_MARKER or "000000"  # –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    # –í–∞–ª—é—Ç–∞ UZS, 1 –≤–∑—Ä–æ—Å–ª—ã–π, –±–µ–∑ –¥–µ—Ç–µ–π
    url = (
        "https://tp.media/r"
        f"?marker={marker}"
        "&campaign_id=100"
        "&trs=chatbot"
        "&search_type=front"
        "&service=airtickets"
        "&adults=1&children=0&infants=0"
        "&currency=uzs"
        f"&origin={origin.upper()}"
        f"&destination={destination.upper()}"
        f"&depart_date={depart_date}"
        f"&return_date={return_date}"
    )
    return url


# =========================
# –î–µ–º–æ-–∑–∞–≥—Ä—É–∑—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# =========================
async def fetch_travelpayouts(origin: str,
                              destination: str,
                              depart_date: str,
                              return_date: str,
                              limit: int = 5) -> List[Dict]:
    """
    –í–∞—Ä–∏–∞–Ω—Ç ‚Ññ1: –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ç–æ–ª—å–∫–æ deeplink (–±–µ–∑ —Ü–µ–Ω —Å API).
    –ú—ã –≤–µ—Ä–Ω–µ–º —Å–ø–∏—Å–æ–∫ "–ø—Å–µ–≤–¥–æ-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" —Å 1-2 –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏, –≥–¥–µ —Å—Å—ã–ª–∫–∞ ‚Äî deeplink.
    –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API-–æ—Ç–≤–µ—Ç.
    """
    deeplink = build_deeplink_url(origin, destination, depart_date, return_date)

    # –ü—Ä–∏–º–µ—Ä 2 –∫–∞—Ä—Ç–æ—á–µ–∫. –ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É ‚Äî —Ä–µ—à–∞–π —Å–∞–º.
    demo = [
        {
            "airline": "Turkish Airlines",
            "origin": origin.upper(),
            "destination": destination.upper(),
            "depart_date": depart_date,
            "return_date": return_date,
            "price": "‚Äî",  # –±–µ–∑ API —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã –Ω–µ—Ç, –ø–æ–∫–∞–∂–µ–º –ø—Ä–æ—á–µ—Ä–∫
            "url": deeplink,
        },
        {
            "airline": "Uzbekistan Airways",
            "origin": origin.upper(),
            "destination": destination.upper(),
            "depart_date": depart_date,
            "return_date": return_date,
            "price": "‚Äî",
            "url": deeplink,
        },
    ]
    return demo[:max(1, min(limit, len(demo)))]

    # –í–∞—Ä–∏–∞–Ω—Ç ‚Ññ2 (—Ä–∞—Å—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ –ø–æ–¥—Å—Ç–∞–≤—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å API):
    # if not TP_API_TOKEN:
    #     return demo[:1]
    #
    # api_url = "https://api.travelpayouts.com/..."  # —Ç–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    # headers = {"X-Access-Token": TP_API_TOKEN}
    # params = {...}
    # async with aiohttp.ClientSession(headers=headers) as s:
    #     async with s.get(api_url, params=params, timeout=20) as r:
    #         if r.status != 200:
    #             return demo[:1]
    #         data = await r.json()
    #         # –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π data –≤ —Å–ø–∏—Å–æ–∫ dict —Å –∫–ª—é—á–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—ë—Ç build_ticket_card()
    #         results = [...]
    #         return results


# =========================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# =========================
@dp.message(Command("start"))
async def on_start(message: Message) -> None:
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã.\n\n"
        "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
        "<code>/tickets TAS IST 2025-11-01 2025-11-10</code>\n\n"
        "–ì–¥–µ:\n"
        "‚Ä¢ <b>TAS</b> ‚Äî –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ (IATA)\n"
        "‚Ä¢ <b>IST</b> ‚Äî –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è (IATA)\n"
        "‚Ä¢ –¥–∞—Ç—ã ‚Äî –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>YYYY-MM-DD</code>\n\n"
        "–°—Å—ã–ª–∫–∏ –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã –≤ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–ª–µ—Ç—ã¬ª."
    )
    await message.answer(text)


@dp.message(Command("tickets"))
async def tickets_cmd(message: Message) -> None:
    """
    –ü—Ä–∏–º–µ—Ä: /tickets TAS IST 2025-11-01 2025-11-10
    """
    parts = message.text.split()
    if len(parts) != 6:
        await message.answer(
            "–ù—É–∂–Ω–æ —Ç–∞–∫:\n"
            "<code>/tickets TAS IST 2025-11-01 2025-11-10</code>"
        )
        return

    _, origin, destination, depart_date, return_date = parts[:5+1][0], parts[1], parts[2], parts[3], parts[4]

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    for d in (depart_date, return_date):
        try:
            datetime.strptime(d, "%Y-%m-%d")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD.")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    try:
        results = await fetch_travelpayouts(origin, destination, depart_date, return_date, limit=5)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return

    if not results:
        await message.answer("–ë–∏–ª–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –†–∞—Å—Å—ã–ª–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π (—Å—Å—ã–ª–∫–∞ –Ω–µ –≤–∏–¥–Ω–∞)
    for result in results:
        text, keyboard = build_ticket_card(result)
        await message.answer(text, reply_markup=keyboard)


# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
async def main() -> None:
    # –ù–∞ Render —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ polling
    # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è —É–¥–∞–ª—ë–Ω webhook —É –±–æ—Ç–∞ (—É —Ç–µ–±—è —É–∂–µ —É–¥–∞–ª–µ–Ω)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass



   
