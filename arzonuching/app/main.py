from __future__ import annotations
import os
import asyncio
import calendar
import logging
from dataclasses import dataclass, field
from datetime import date, timedelta
from typing import Dict, List, Optional, Tuple

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.filters import CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode

# =============================
# LOGGING
# =============================
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("avia-bot")

# =============================
# ENV
# =============================
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
TP_API_TOKEN = os.getenv("TP_API_TOKEN", "")      # Travelpayouts token
AVS_API_TOKEN = os.getenv("AVS_API_TOKEN", "")    # Aviasales token (optional)
CURRENCY = os.getenv("CURRENCY", "uzs").lower()   # uzs, usd, rub, etc.
# –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞.
# –ü—Ä–∏–º–µ—Ä: REF_LINK_TEMPLATE="https://example.com/buy?o={origin}&d={destination}&dt={date}&subid={subid}"
REF_LINK_TEMPLATE = os.getenv("REF_LINK_TEMPLATE", "")
REF_SUBID = os.getenv("REF_SUBID", "")
MANAGERS_CHAT_ID = int(os.getenv("MANAGERS_CHAT_ID", "0"))

if not BOT_TOKEN:
    raise SystemExit("Please set BOT_TOKEN env var.")
if not TP_API_TOKEN:
    log.warning("TP_API_TOKEN not set. Real price search will not work.")

# =============================
# STATIC DATA
# =============================
COUNTRIES: Dict[str, List[Tuple[str, str]]] = {
    "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω": [("Tashkent", "TAS")],
    "üáπüá∑ –¢—É—Ä—Ü–∏—è": [("Istanbul", "IST"), ("Antalya", "AYT"), ("Ankara", "ESB")],
    "üá¶üá™ –û–ê–≠": [("Dubai", "DXB"), ("Abu Dhabi", "AUH")],
    "üá∑üá∫ –†–æ—Å—Å–∏—è": [("Moscow", "MOW"), ("Saint‚ÄëPetersburg", "LED"), ("Kazan", "KZN")],
    "üá¨üá™ –ì—Ä—É–∑–∏—è": [("Tbilisi", "TBS")],
    "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": [("Almaty", "ALA"), ("Astana", "NQZ")],
}

MONTHS_RU = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
]
WEEKDAYS_RU = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

PAGE_SIZE = 5

# =============================
# STATE
# =============================
@dataclass
class QueryState:
    origin: Optional[str] = None
    origin_label: Optional[str] = None
    destination: Optional[str] = None
    destination_label: Optional[str] = None
    depart_date: Optional[date] = None
    return_date: Optional[date] = None
    results: List[dict] = field(default_factory=list)
    page: int = 0
    selected_idx: Optional[int] = None
    adding_return: bool = False

user_state: Dict[int, QueryState] = {}

# =============================
# HELPERS
# =============================

def flag_for_iata(iata: Optional[str]) -> str:
    if not iata:
        return "‚úàÔ∏è"
    for country, cities in COUNTRIES.items():
        for _city, code in cities:
            if code == iata:
                # country like "üáπüá∑ –¢—É—Ä—Ü–∏—è" ‚Üí take first token
                return country.split()[0]
    return "‚úàÔ∏è"

# =============================
# KEYBOARDS
# =============================

def countries_kb(stage: str, exclude_iata: Optional[str] = None) -> InlineKeyboardMarkup:
    buttons: List[List[InlineKeyboardButton]] = []
    for country, cities in COUNTRIES.items():
        for city, iata in cities:
            if exclude_iata and iata == exclude_iata:
                continue
            text = f"{country}: {city} ({iata})"
            cb = f"pick:{stage}:{iata}:{city}"
            buttons.append([InlineKeyboardButton(text=text, callback_data=cb)])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def month_days(year: int, month: int) -> List[List[Optional[int]]]:
    cal = calendar.Calendar(firstweekday=0)
    weeks: List[List[Optional[int]]] = []
    row: List[Optional[int]] = []
    for d in cal.itermonthdays(year, month):
        row.append(None if d == 0 else d)
        if len(row) == 7:
            weeks.append(row); row = []
    if row:
        while len(row) < 7:
            row.append(None)
        weeks.append(row)
    return weeks


def calendar_kb(target: date, selected: Optional[date] = None) -> InlineKeyboardMarkup:
    today = date.today()
    y, m = target.year, target.month
    weeks = month_days(y, m)
    header = InlineKeyboardButton(text=f"{MONTHS_RU[m-1]} {y}", callback_data="noop")
    prev_mon = (target.replace(day=1) - timedelta(days=1)).replace(day=1)
    next_mon = (target.replace(day=28) + timedelta(days=4)).replace(day=1)

    rows: List[List[InlineKeyboardButton]] = []
    rows.append([
        InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"cal:prev:{prev_mon.isoformat()}"),
        header,
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"cal:next:{next_mon.isoformat()}")
    ])
    rows.append([InlineKeyboardButton(text=t, callback_data="noop") for t in WEEKDAYS_RU])

    for w in weeks:
        row: List[InlineKeyboardButton] = []
        for d in w:
            if d is None:
                row.append(InlineKeyboardButton(text=" ", callback_data="noop"))
            else:
                dt = date(y, m, d)
                if dt < today:
                    row.append(InlineKeyboardButton(text="¬∑", callback_data="noop"))
                    continue
                label = f"[{d}]" if selected and dt == selected else str(d)
                row.append(InlineKeyboardButton(text=label, callback_data=f"cal:set:{dt.isoformat()}"))
        rows.append(row)

    rows.append([InlineKeyboardButton(text="üî• –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ—à—ë–≤—ã–µ –¥–∞—Ç—ã", callback_data="cal:near:7")])
    rows.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back:dest")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def results_kb(visible: int, start_index: int, has_more: bool, can_add_return: bool = True) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for i in range(visible):
        idx = start_index + i
        rows.append([InlineKeyboardButton(text=f"–ö—É–ø–∏—Ç—å #{idx+1} üí≥", callback_data=f"buy:{idx}")])
    nav = []
    if has_more:
        nav.append(InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="res:more"))
    if can_add_return:
        nav.append(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –±–∏–ª–µ—Ç ‚Ü©Ô∏è", callback_data="ret:add"))
    nav.append(InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="reset"))
    rows.append(nav)
    return InlineKeyboardMarkup(inline_keyboard=rows)

# =============================
# API CLIENTS
# =============================
async def fetch_travelpayouts(origin: str, destination: str, depart: date, limit: int = 20) -> List[dict]:
    if not TP_API_TOKEN:
        return []
    url = (
        "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
        f"?origin={origin}&destination={destination}&departure_at={depart.strftime('%Y-%m-%d')}"
        f"&currency={CURRENCY}&limit={limit}&page=1&sorting=price&direct=false&unique=false&one_way=true"
        f"&token={TP_API_TOKEN}"
    )
    async with aiohttp.ClientSession() as s:
        async with s.get(url, timeout=20) as r:
            if r.status != 200:
                return []
            data = await r.json()
            return data.get("data", [])


async def fetch_aviasales(origin: str, destination: str, depart: date, limit: int = 20) -> List[dict]:
    if not AVS_API_TOKEN:
        return []
    url = (
        "https://api.aviasales.com/v3/prices_for_dates"
        f"?origin={origin}&destination={destination}&departure_at={depart.strftime('%Y-%m-%d')}"
        f"&currency={CURRENCY}&limit={limit}&sorting=price&one_way=true"
    )
    headers = {"X-Access-Token": AVS_API_TOKEN}
    try:
        async with aiohttp.ClientSession() as s:
            async with s.get(url, headers=headers, timeout=20) as r:
                if r.status != 200:
                    return []
                data = await r.json()
                return data.get("data", [])
    except Exception:
        return []


def merge_results(*lists: List[dict], limit: int = 40) -> List[dict]:
    pool: List[dict] = []
    for lst in lists:
        pool.extend(lst)
    normalized: List[dict] = []
    for item in pool:
        price = item.get("price") or item.get("value")
        airline = item.get("airline") or item.get("gate") or ""
        depart_at = item.get("departure_at") or item.get("departure_at_iso") or ""
        flight_number = item.get("flight_number") or ""
        link = item.get("link") or item.get("deeplink") or ""  # —Ö—Ä–∞–Ω–∏–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
        normalized.append({
            "price": int(price) if str(price).isdigit() else price,
            "airline": airline,
            "link": link,
            "departure_at": depart_at,
            "flight_number": flight_number,
        })
    normalized.sort(key=lambda x: (x["price"] if isinstance(x["price"], int) else 10**12))
    seen = set()
    unique: List[dict] = []
    for n in normalized:
        k = (n.get("airline"), n.get("departure_at"))
        if k in seen:
            continue
        seen.add(k)
        unique.append(n)
        if len(unique) >= limit:
            break
    return unique

# =============================
# RENDERING
# =============================

def fmt_price(v: Optional[int]) -> str:
    if v is None:
        return "‚Äî"
    return f"{v:,}".replace(",", " ") + f" {CURRENCY.upper()}"


def build_results_text(q: QueryState) -> str:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω (–í–∞—Ä–∏–∞–Ω—Ç B)
    head_lines = [
        f"{flag_for_iata(q.origin)} {q.origin or '?'} ‚Üí {flag_for_iata(q.destination)} {q.destination or '?'}",
        f"üìÖ {q.depart_date.strftime('%d.%m.%Y') if q.depart_date else '‚Äî'}",
    ]
    if q.return_date:
        head_lines.append(f"‚Ü©Ô∏è –û–±—Ä–∞—Ç–Ω–æ: {q.return_date.strftime('%d.%m.%Y')}")
    head_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

    if not q.results:
        return "
".join(head_lines + ["–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."])

    start = q.page * PAGE_SIZE
    chunk = q.results[start:start + PAGE_SIZE]
    if not chunk:
        return "
".join(head_lines + ["–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã."])

    lines: List[str] = []
    for i, r in enumerate(chunk, start=start + 1):
        dt = r.get("departure_at")
        d_show, t_show = "‚Äî", "‚Äî"
        if isinstance(dt, str) and len(dt) >= 16 and "-" in dt and "T" in dt:
            _y, m, d = dt[:10].split("-")
            d_show = f"{d}.{m}"
            t_show = dt[11:16]
        airline = r.get("airline", "")
        price = fmt_price(r.get("price"))
        lines.append(
            f"{i}) üí∏ {price}
"
            f"‚úàÔ∏è {airline}
"
            f"‚è∞ –í—ã–ª–µ—Ç: {d_show} ‚Ä¢ {t_show}"
        )

    return "
".join(head_lines + lines) + "
"

# =============================
# BOT
# =============================
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

@dp.message(CommandStart())
async def on_start(m: Message):
    user_state[m.from_user.id] = QueryState()
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:", reply_markup=countries_kb(stage="origin"))

@dp.message(F.text == "/ping")
async def ping(m: Message):
    await m.answer("pong")

@dp.message(F.text)
async def any_text(m: Message):
    if m.from_user.id not in user_state or not user_state[m.from_user.id].origin:
        await m.answer("–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –¥–∞—Ç—É ‚úàÔ∏è")
    else:
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –∏–ª–∏ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")

@dp.callback_query(F.data.startswith("pick:origin:"))
async def pick_origin(c: CallbackQuery):
    _, _, iata, city = c.data.split(":", 3)
    st = user_state.setdefault(c.from_user.id, QueryState())
    st.origin = iata; st.origin_label = city
    await c.message.edit_text(
        f"–í—ã–ª–µ—Ç: {iata}
–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É/–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:",
        reply_markup=countries_kb(stage="dest", exclude_iata=iata),
    )
    await c.answer()

@dp.callback_query(F.data.startswith("pick:dest:"))
async def pick_dest(c: CallbackQuery):
    _, _, iata, city = c.data.split(":", 3)
    st = user_state.setdefault(c.from_user.id, QueryState())
    st.destination = iata; st.destination_label = city
    today = date.today()
    start = today if today.day <= 25 else (today.replace(day=28) + timedelta(days=4)).replace(day=1)
    await c.message.edit_text(
        f"–ú–∞—Ä—à—Ä—É—Ç: {st.origin} ‚Üí {st.destination}
–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞:",
        reply_markup=calendar_kb(start, selected=st.depart_date),
    )
    await c.answer()

@dp.callback_query(F.data.startswith("cal:prev:"))
async def cal_prev(c: CallbackQuery):
    iso = c.data.split(":", 2)[2]
    target = date.fromisoformat(iso)
    st = user_state.setdefault(c.from_user.id, QueryState())
    await c.message.edit_reply_markup(reply_markup=calendar_kb(target, selected=st.depart_date))
    await c.answer()

@dp.callback_query(F.data.startswith("cal:next:"))
async def cal_next(c: CallbackQuery):
    iso = c.data.split(":", 2)[2]
    target = date.fromisoformat(iso)
    st = user_state.setdefault(c.from_user.id, QueryState())
    await c.message.edit_reply_markup(reply_markup=calendar_kb(target, selected=st.depart_date))
    await c.answer()

@dp.callback_query(F.data.startswith("cal:set:"))
async def cal_set(c: CallbackQuery):
    iso = c.data.split(":", 2)[2]
    chosen = date.fromisoformat(iso)
    st = user_state.setdefault(c.from_user.id, QueryState())
    if st.adding_return:
        st.return_date = chosen
        st.adding_return = False
        await c.answer("–î–∞—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–ª–µ—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞")
        text = build_results_text(st)
        start_idx = st.page * PAGE_SIZE
        has_more = len(st.results) > start_idx + PAGE_SIZE
        kb = results_kb(
            visible=min(PAGE_SIZE, len(st.results) - start_idx),
            start_index=start_idx,
            has_more=has_more,
            can_add_return=st.return_date is None,
        )
        await c.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
        return

    st.depart_date = chosen; st.page = 0
    await c.message.edit_text(
        "–ó–∞–ø—Ä–æ—Å: {} ‚Üí {} | {}
–ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã...".format(
            st.origin, st.destination, st.depart_date.strftime("%d.%m.%Y")
        )
    )
    await c.answer("–ò—â—É –±–∏–ª–µ—Ç—ã‚Ä¶")

    tp_task = fetch_travelpayouts(st.origin, st.destination, st.depart_date, limit=20)
    avs_task = fetch_aviasales(st.origin, st.destination, st.depart_date, limit=20)
    tp_res, avs_res = await asyncio.gather(tp_task, avs_task)

    st.results = merge_results(tp_res, avs_res, limit=40)
    text = build_results_text(st)
    start_idx = st.page * PAGE_SIZE
    has_more = len(st.results) > start_idx + PAGE_SIZE
    kb = results_kb(
        visible=min(PAGE_SIZE, len(st.results) - start_idx),
        start_index=start_idx,
        has_more=has_more,
        can_add_return=st.return_date is None,
    )
    await c.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)

@dp.callback_query(F.data == "res:more")
async def res_more(c: CallbackQuery):
    st = user_state.get(c.from_user.id)
    if not st or not st.results:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞—Ç—É", show_alert=True)
        return
    st.page += 1
    text = build_results_text(st)
    if text == c.message.text:
        await c.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    start_idx = st.page * PAGE_SIZE
    has_more = len(st.results) > start_idx + PAGE_SIZE
    kb = results_kb(
        visible=min(PAGE_SIZE, max(0, len(st.results) - start_idx)),
        start_index=start_idx,
        has_more=has_more,
        can_add_return=st.return_date is None,
    )
    await c.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)
    await c.answer()

@dp.callback_query(F.data.startswith("buy:"))
async def buy_ticket(c: CallbackQuery):
    idx = int(c.data.split(":", 1)[1])
    st = user_state.get(c.from_user.id)
    if not st or not st.results or idx >= len(st.results):
        await c.answer("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True); return
    st.selected_idx = idx
    choice = st.results[idx]
    dt = choice.get("departure_at")
    dt_str = dt[:16].replace("T", " ") if isinstance(dt, str) else "‚Äî"

    # –°–±–æ—Ä–∫–∞ —Ä–µ—Ñ‚Äë—Å—Å—ã–ª–∫–∏
    def build_ref_link() -> Optional[str]:
        if choice.get("link"):
            return choice.get("link")
        if REF_LINK_TEMPLATE:
            dt_out = (st.depart_date or date.today()).strftime("%Y-%m-%d")
            try:
                return REF_LINK_TEMPLATE.format(
                    origin=st.origin, destination=st.destination, date=dt_out, subid=REF_SUBID
                )
            except Exception:
                return None
        return None

    ref_url = build_ref_link()

    txt = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç #{idx + 1}:
"
        f"–¶–µ–Ω–∞: {fmt_price(choice.get('price'))}
"
        f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {choice.get('airline', '')}
"
        f"–í—ã–ª–µ—Ç: {dt_str}

"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏."
    )
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await c.message.answer(txt, reply_markup=kb)
    if ref_url:
        await c.message.answer(
            "–ì–æ—Ç–æ–≤–æ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=ref_url)]]
            ),
        )
    await c.answer()

@dp.message(F.contact)
async def got_contact(m: Message):
    st = user_state.get(m.from_user.id)
    if not st or st.selected_idx is None or not st.results:
        await m.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."); return
    choice = st.results[st.selected_idx]
    phone = m.contact.phone_number
    dt = choice.get("departure_at")
    dt_str = dt[:16].replace("T", " ") if isinstance(dt, str) else "‚Äî"
    text = (
        "üßæ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–∞
"
        f"–ú–∞—Ä—à—Ä—É—Ç: {st.origin} ‚Üí {st.destination}
"
        f"–î–∞—Ç–∞: {st.depart_date.strftime('%d.%m.%Y') if st.depart_date else '‚Äî'}
"
        f"–í–∞—Ä–∏–∞–Ω—Ç: #{st.selected_idx + 1}
"
        f"–¶–µ–Ω–∞: {fmt_price(choice.get('price'))}
"
        f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: {choice.get('airline', '')}
"
        f"–í—ã–ª–µ—Ç: {dt_str}
"
        f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {phone}
"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{m.from_user.username or '-'} | {m.from_user.full_name}"
    )
    if MANAGERS_CHAT_ID:
        try:
            await bot.send_message(MANAGERS_CHAT_ID, text)
        except Exception as e:
            log.error(f"Send to managers failed: {e}")
            await m.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –º–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–π —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ.")
            return
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@dp.callback_query(F.data == "back:dest")
async def back_to_dest(c: CallbackQuery):
    st = user_state.setdefault(c.from_user.id, QueryState())
    await c.message.edit_text(
        f"–í—ã–ª–µ—Ç: {st.origin}
–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É/–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è:",
        reply_markup=countries_kb(stage="dest", exclude_iata=st.origin),
    )
    await c.answer()

@dp.callback_query(F.data == "reset")
async def reset_flow(c: CallbackQuery):
    user_state[c.from_user.id] = QueryState()
    await c.message.edit_text("–ù–æ–≤—ã–π –ø–æ–∏—Å–∫. –í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –≤—ã–ª–µ—Ç–∞:", reply_markup=countries_kb(stage="origin"))
    await c.answer()

@dp.callback_query(F.data == "cal:near:7")
async def cal_near_7(c: CallbackQuery):
    st = user_state.get(c.from_user.id)
    if not st or not st.origin or not st.destination:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç", show_alert=True); return
    base = st.depart_date or (date.today() + timedelta(days=1))
    days = [base + timedelta(days=i) for i in range(7)]
    tasks = [fetch_travelpayouts(st.origin, st.destination, d, limit=1) for d in days]
    results = await asyncio.gather(*tasks)
    lines = ["üî• –ë–ª–∏–∂–∞–π—à–∏–µ 7 –¥–∞—Ç:"]
    for d, r in zip(days, results):
        price = r[0].get("price") if r else None
        lines.append(f"‚Ä¢ {d.strftime('%d.%m.%Y')} ‚Äî {fmt_price(price) if price else '‚Äî'}")
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f"cal:back:{base.replace(day=1).isoformat()}")]])
    await c.message.edit_text("
".join(lines), reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.startswith("cal:back:"))
async def cal_back(c: CallbackQuery):
    iso = c.data.split(":", 2)[2]
    target = date.fromisoformat(iso)
    st = user_state.setdefault(c.from_user.id, QueryState())
    await c.message.edit_text(
        f"–ú–∞—Ä—à—Ä—É—Ç: {st.origin} ‚Üí {st.destination}
–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞:",
        reply_markup=calendar_kb(target, selected=st.depart_date),
    )
    await c.answer()

# =============================
# RUN
# =============================
async def main() -> None:
    log.info("Booting‚Ä¶")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted (drop_pending_updates=True)")
    except Exception as e:
        log.warning(f"delete_webhook failed: {e}")
    me = await bot.get_me()
    log.info(f"Started as @{me.username} ({me.id})")
    try:
        if MANAGERS_CHAT_ID:
            await bot.send_message(MANAGERS_CHAT_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏.")
    except Exception as e:
        log.warning(f"Managers notify failed: {e}")
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"]) 

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("Bot stopped")
